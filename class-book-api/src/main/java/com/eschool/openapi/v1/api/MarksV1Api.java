/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eschool.openapi.v1.api;

import com.eschool.openapi.v1.model.CommonResponseDto;
import com.eschool.openapi.v1.model.ErrorView;
import com.eschool.openapi.v1.model.MarkDto;
import java.time.OffsetDateTime;
import com.eschool.openapi.v1.model.PageViewDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2022-11-15T10:48:04.327672500+02:00[Europe/Helsinki]")
@Validated
@Api(value = "MarksV1", description = "the MarksV1 API")
public interface MarksV1Api {

    /**
     * DELETE /ui/marks/{markId} : Mark deleting
     *
     * @param markId Id for mark deleting (required)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(
        value = "Mark deleting",
        nickname = "deleteMark",
        notes = "",
        response = CommonResponseDto.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
        },
        tags={ "marks-v1", }
    )
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @DeleteMapping(
        value = "/ui/marks/{markId}",
        produces = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> deleteMark(
        @ApiParam(value = "Id for mark deleting", required=true) @PathVariable("markId") Long markId);


    /**
     * GET /ui/marks/{markId} : Information about concrete mark
     *
     * @param markId Mark identifier (required)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(
        value = "Information about concrete mark",
        nickname = "getMarkById",
        notes = "",
        response = MarkDto.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         },
        tags={ "marks-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = MarkDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @GetMapping(
        value = "/ui/marks/{markId}",
        produces = { "application/json" }
    )
    ResponseEntity<MarkDto> getMarkById(
        @ApiParam(value = "Mark identifier", required=true) @PathVariable("markId") Long markId);

    /**
     * GET /ui/marks : List of Marks
     *
     * @param page Page number (optional)
     * @param size Marks count on page (optional)
     * @param sort Sort criteria (can have multiple declarations - id, creationDate, changingDate, isDeleted) (optional, default to new ArrayList&lt;&gt;())
     * @param id Filter by id (optional, default to new ArrayList&lt;&gt;())
     * @param creationDate Filter by creationDate (optional)
     * @param changingDate Filter by changingDate (optional)
     * @param isDeleted Filter by isDeleted (optional)
     * @return Successful response (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(
        value = "List of Marks",
        nickname = "getMarkList",
        notes = "",
        response = PageViewDto.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         },
        tags={ "marks-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = PageViewDto.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @GetMapping(
        value = "/ui/marks",
        produces = { "application/json" }
    )
    ResponseEntity<PageViewDto> getMarkList(
        @ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page,
        @ApiParam(value = "Marks count on page") @Valid @RequestParam(value = "size", required = false) Integer size,
        @ApiParam(value = "Sort criteria (can have multiple declarations - id, creationDate, changingDate, isDeleted)") @Valid @RequestParam(value = "sort", required = false) List<String> sort,
        @ApiParam(value = "Filter by id") @Valid @RequestParam(value = "id", required = false) List<Long> id,
        @ApiParam(value = "Filter by creationDate") @Valid @RequestParam(value = "creationDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime creationDate,
        @ApiParam(value = "Filter by changingDate") @Valid @RequestParam(value = "changingDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime changingDate,
        @ApiParam(value = "Filter by isDeleted") @Valid @RequestParam(value = "isDeleted", required = false) Boolean isDeleted);


    /**
     * POST /ui/marks : Creating new marks
     *
     * @param markDto Callback payload (optional)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(
        value = "Creating new marks",
        nickname = "postMark",
        notes = "",
        response = CommonResponseDto.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         },
        tags={ "marks-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @PostMapping(
        value = "/ui/marks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> postMark(@ApiParam(value = "Callback payload") @Valid @RequestBody(required = false) MarkDto markDto);


    /**
     * PUT /ui/marks/{markId} : Mark updating
     *
     * @param markId Id for mark updating (required)
     * @param markDto Callback payload (optional)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(
        value = "Mark updating",
        nickname = "updateMark",
        notes = "",
        response = CommonResponseDto.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         },
        tags={ "marks-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @PutMapping(
        value = "/ui/marks/{markId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> updateMark(
        @ApiParam(value = "Id for mark updating",required=true) @PathVariable("markId") Long markId,
        @ApiParam(value = "Callback payload") @Valid @RequestBody(required = false) MarkDto markDto);

}
