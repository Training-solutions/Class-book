/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eschool.openapi.v1.api;

import com.eschool.openapi.v1.model.CommonResponseDto;
import com.eschool.openapi.v1.model.ErrorView;
import com.eschool.openapi.v1.model.GroupDto;
import com.eschool.openapi.v1.model.PageViewDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import javax.validation.Valid;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-04T11:27:54.497233400+03:00[Asia/Istanbul]")
@Validated
@Api(value = "GroupsV1", description = "the GroupsV1 API")
public interface GroupsV1Api {

    /**
     * DELETE /ui/groups/{groupId} : Group deleting
     *
     * @param groupId Id for group deleting (required)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Group deleting", nickname = "deleteGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @DeleteMapping(
        value = "/ui/groups/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> deleteGroup(@ApiParam(value = "Id for group deleting",required=true) @PathVariable("groupId") Long groupId);


    /**
     * GET /ui/groups/{groupId} : Information about concrete group
     *
     * @param groupId Group identifier (required)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Information about concrete group", nickname = "getGroupById", notes = "", response = GroupDto.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = GroupDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @GetMapping(
        value = "/ui/groups/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<GroupDto> getGroupById(@ApiParam(value = "Group identifier",required=true) @PathVariable("groupId") Long groupId);


    /**
     * GET /ui/groups : List of groups
     *
     * @param page Page number (optional)
     * @param size Groups count on page (optional)
     * @param sort Sort criteria (can have multiple declarations - id, groupTitle, creationDate, changingDate, isDeleted) (optional, default to new ArrayList&lt;&gt;())
     * @param id Filter by id (optional, default to new ArrayList&lt;&gt;())
     * @param groupTitle Filter by groupTitle (optional, default to new ArrayList&lt;&gt;())
     * @param creationDate Filter by creationDate (optional)
     * @param changingDate Filter by changingDate (optional)
     * @param isDeleted Filter by isDeleted (optional)
     * @return Successful response (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "List of groups", nickname = "getGroupList", notes = "", response = PageViewDto.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = PageViewDto.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @GetMapping(
        value = "/ui/groups",
        produces = { "application/json" }
    )
    ResponseEntity<PageViewDto<GroupDto>> getGroupList(Pageable pageable);


    /**
     * POST /ui/groups : Creating new group
     *
     * @param groupDto Callback payload (optional)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Creating new group", nickname = "postGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @PostMapping(
        value = "/ui/groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> postGroup(@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) GroupDto groupDto);


    /**
     * PUT /ui/groups/{groupId} : Group updating
     *
     * @param groupId Id for group updating (required)
     * @param groupDto Callback payload (optional)
     * @return Successful response (status code 200)
     *         or Supplied request data are invalid (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or User is not granted sufficient privileges (status code 403)
     *         or Resource was not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Group updating", nickname = "updateGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class),
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorView.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid"),
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorView.class),
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorView.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorView.class) })
    @PutMapping(
        value = "/ui/groups/{groupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CommonResponseDto> updateGroup(@ApiParam(value = "Id for group updating",required=true) @PathVariable("groupId") Long groupId,@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) GroupDto groupDto);

}
