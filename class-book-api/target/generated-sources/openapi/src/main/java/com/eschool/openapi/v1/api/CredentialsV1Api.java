/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.eschool.openapi.v1.api;

import com.eschool.openapi.v1.model.CommonResponseDto;
import com.eschool.openapi.v1.model.CredentialDto;
import com.eschool.openapi.v1.model.ErrorDto;
import java.time.OffsetDateTime;
import com.eschool.openapi.v1.model.PageViewDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-30T19:01:36.792883800+08:00[Asia/Shanghai]")
@Validated
@Api(value = "CredentialsV1", description = "the CredentialsV1 API")
public interface CredentialsV1Api {

    /**
     * DELETE /ui/credentials/{credentialId} : Credential deleting
     *
     * @param credentialId Id for credential deleting (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Internal server error (status code 500)
     */
    @ApiOperation(value = "Credential deleting", nickname = "deleteCredential", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "credentials-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/credentials/{credentialId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<CommonResponseDto> _deleteCredential(@ApiParam(value = "Id for credential deleting",required=true) @PathVariable("credentialId") Long credentialId);


    /**
     * GET /ui/credentials/{credentialId} : Information about concrete credential
     *
     * @param credentialId Credential identifier (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Information about concrete credential", nickname = "getCredentialById", notes = "", response = CredentialDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "credentials-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CredentialDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/credentials/{credentialId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CredentialDto> _getCredentialById(@ApiParam(value = "Credential identifier",required=true) @PathVariable("credentialId") Long credentialId);


    /**
     * GET /ui/credentials : List of credentials
     *
     * @param page Page number (optional)
     * @param size Credentials count on page (optional)
     * @param sort Sort criteria (can have multiple declarations - id, username, creationDate, changingDate, isDeleted) (optional, default to new ArrayList&lt;&gt;())
     * @param id Filter by id (optional, default to new ArrayList&lt;&gt;())
     * @param username Filter by username (optional, default to new ArrayList&lt;&gt;())
     * @param creationDate Filter by creationDate (optional)
     * @param changingDate Filter by changingDate (optional)
     * @param isDeleted Filter by isDeleted (optional)
     * @return Successful response (status code 200)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "List of credentials", nickname = "getCredentialList", notes = "", response = PageViewDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "credentials-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = PageViewDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/credentials",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PageViewDto> _getCredentialList(@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page@ApiParam(value = "Credentials count on page") @Valid @RequestParam(value = "size", required = false) Integer size@ApiParam(value = "Sort criteria (can have multiple declarations - id, username, creationDate, changingDate, isDeleted)") @Valid @RequestParam(value = "sort", required = false) List<String> sort@ApiParam(value = "Filter by id") @Valid @RequestParam(value = "id", required = false) List<Long> id@ApiParam(value = "Filter by username") @Valid @RequestParam(value = "username", required = false) List<String> username@ApiParam(value = "Filter by creationDate") @Valid @RequestParam(value = "creationDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime creationDate@ApiParam(value = "Filter by changingDate") @Valid @RequestParam(value = "changingDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime changingDate@ApiParam(value = "Filter by isDeleted") @Valid @RequestParam(value = "isDeleted", required = false) Boolean isDeleted);


    /**
     * POST /ui/credentials : Creating new credential
     *
     * @param credentialDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Creating new credential", nickname = "postCredential", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "credentials-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/credentials",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CommonResponseDto> _postCredential(@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) CredentialDto credentialDto);


    /**
     * PUT /ui/credentials/{credentialId} : Credential updating
     *
     * @param credentialId Id for credential updating (required)
     * @param credentialDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Credential updating", nickname = "updateCredential", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "credentials-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/credentials/{credentialId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CommonResponseDto> _updateCredential(@ApiParam(value = "Id for credential updating",required=true) @PathVariable("credentialId") Long credentialId@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) CredentialDto credentialDto);

}
