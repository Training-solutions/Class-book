/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.eschool.openapi.v1.api;

import com.eschool.openapi.v1.model.CommonResponseDto;
import com.eschool.openapi.v1.model.ErrorDto;
import com.eschool.openapi.v1.model.GroupDto;
import java.time.OffsetDateTime;
import com.eschool.openapi.v1.model.PageViewDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-01T17:44:52.817734300+08:00[Asia/Shanghai]")
@Validated
@Api(value = "GroupsV1", description = "the GroupsV1 API")
public interface GroupsV1Api {

    /**
     * DELETE /ui/groups/{groupId} : Group deleting
     *
     * @param groupId Id for group deleting (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Internal server error (status code 500)
     */
    @ApiOperation(value = "Group deleting", nickname = "deleteGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/groups/{groupId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<CommonResponseDto> _deleteGroup(@ApiParam(value = "Id for group deleting",required=true) @PathVariable("groupId") Long groupId);


    /**
     * GET /ui/groups/{groupId} : Information about concrete group
     *
     * @param groupId Group identifier (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Information about concrete group", nickname = "getGroupById", notes = "", response = GroupDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = GroupDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/groups/{groupId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GroupDto> _getGroupById(@ApiParam(value = "Group identifier",required=true) @PathVariable("groupId") Long groupId);


    /**
     * GET /ui/groups : List of groups
     *
     * @param page Page number (optional)
     * @param size Groups count on page (optional)
     * @param sort Sort criteria (can have multiple declarations - id, groupTitle, creationDate, changingDate, isDeleted) (optional, default to new ArrayList&lt;&gt;())
     * @param id Filter by id (optional, default to new ArrayList&lt;&gt;())
     * @param groupTitle Filter by groupTitle (optional, default to new ArrayList&lt;&gt;())
     * @param creationDate Filter by creationDate (optional)
     * @param changingDate Filter by changingDate (optional)
     * @param isDeleted Filter by isDeleted (optional)
     * @return Successful response (status code 200)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "List of groups", nickname = "getGroupList", notes = "", response = PageViewDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = PageViewDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/groups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PageViewDto> _getGroupList(@ApiParam(value = "Page number") @Valid @RequestParam(value = "page", required = false) Integer page@ApiParam(value = "Groups count on page") @Valid @RequestParam(value = "size", required = false) Integer size@ApiParam(value = "Sort criteria (can have multiple declarations - id, groupTitle, creationDate, changingDate, isDeleted)") @Valid @RequestParam(value = "sort", required = false) List<String> sort@ApiParam(value = "Filter by id") @Valid @RequestParam(value = "id", required = false) List<Long> id@ApiParam(value = "Filter by groupTitle") @Valid @RequestParam(value = "groupTitle", required = false) List<String> groupTitle@ApiParam(value = "Filter by creationDate") @Valid @RequestParam(value = "creationDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime creationDate@ApiParam(value = "Filter by changingDate") @Valid @RequestParam(value = "changingDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime changingDate@ApiParam(value = "Filter by isDeleted") @Valid @RequestParam(value = "isDeleted", required = false) Boolean isDeleted);


    /**
     * POST /ui/groups : Creating new group
     *
     * @param groupDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Creating new group", nickname = "postGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/groups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CommonResponseDto> _postGroup(@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) GroupDto groupDto);


    /**
     * PUT /ui/groups/{groupId} : Group updating
     *
     * @param groupId Id for group updating (required)
     * @param groupDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Group updating", nickname = "updateGroup", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "groups-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/groups/{groupId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CommonResponseDto> _updateGroup(@ApiParam(value = "Id for group updating",required=true) @PathVariable("groupId") Long groupId@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) GroupDto groupDto);

}
