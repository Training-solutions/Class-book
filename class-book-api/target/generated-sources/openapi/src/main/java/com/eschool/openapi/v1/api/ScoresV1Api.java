/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.eschool.openapi.v1.api;

import com.eschool.openapi.v1.model.CommonResponseDto;
import com.eschool.openapi.v1.model.ErrorDto;
import com.eschool.openapi.v1.model.ScoreDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-30T19:01:36.792883800+08:00[Asia/Shanghai]")
@Validated
@Api(value = "ScoresV1", description = "the ScoresV1 API")
public interface ScoresV1Api {

    /**
     * DELETE /ui/scores/{scoreId} : Score deleting
     *
     * @param scoreId Id for score deleting (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Internal server error (status code 500)
     */
    @ApiOperation(value = "Score deleting", nickname = "deleteScore", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "scores-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/scores/{scoreId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<CommonResponseDto> _deleteScore(@ApiParam(value = "Id for score deleting",required=true) @PathVariable("scoreId") Long scoreId);


    /**
     * GET /ui/scores/{scoreId} : Information about concrete score
     *
     * @param scoreId Score identifier (required)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Information about concrete score", nickname = "getScoreById", notes = "", response = ScoreDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "scores-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = ScoreDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/scores/{scoreId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ScoreDto> _getScoreById(@ApiParam(value = "Score identifier",required=true) @PathVariable("scoreId") Long scoreId);


    /**
     * POST /ui/scores : Creating new score
     *
     * @param scoreDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Creating new score", nickname = "postScore", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "scores-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/scores",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CommonResponseDto> _postScore(@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) ScoreDto scoreDto);


    /**
     * PUT /ui/scores/{scoreId} : Score updating
     *
     * @param scoreId Id for score updating (required)
     * @param scoreDto Callback payload (optional)
     * @return Successful response (status code 200)Supplied request data are invalid (status code 400)Access token is missing or invalid (status code 401)User is not granted sufficient privileges (status code 403)Resource was not found (status code 404)Internal server error (status code 500)
     */
    @ApiOperation(value = "Score updating", nickname = "updateScore", notes = "", response = CommonResponseDto.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "scores-v1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = CommonResponseDto.class)
        @ApiResponse(code = 400, message = "Supplied request data are invalid", response = ErrorDto.class)
        @ApiResponse(code = 401, message = "Access token is missing or invalid")
        @ApiResponse(code = 403, message = "User is not granted sufficient privileges", response = ErrorDto.class)
        @ApiResponse(code = 404, message = "Resource was not found", response = ErrorDto.class)
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDto.class) })
    @RequestMapping(value = "/ui/scores/{scoreId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CommonResponseDto> _updateScore(@ApiParam(value = "Id for score updating",required=true) @PathVariable("scoreId") Long scoreId@ApiParam(value = "Callback payload"  )  @Valid @RequestBody(required = false) ScoreDto scoreDto);

}
